import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Dense, Flatten, Conv2D, MaxPooling2D
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.datasets import mnist

(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

x_train_rnn = x_train.reshape(-1, 28, 28)
x_test_rnn = x_test.reshape(-1, 28, 28)
x_train_cnn = x_train.reshape(-1, 28, 28, 1)
x_test_cnn = x_test.reshape(-1, 28, 28, 1)

y_train_cat = to_categorical(y_train, 10)
y_test_cat = to_categorical(y_test, 10)

rnn_model = Sequential([
    SimpleRNN(64, input_shape=(28, 28), activation='relu'),
    Dense(10, activation='softmax')
])
rnn_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

cnn_model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)),
    MaxPooling2D((2,2)),
    Flatten(),
    Dense(10, activation='softmax')
])
cnn_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

rnn_model.fit(x_train_rnn, y_train_cat, epochs=3, batch_size=64, validation_data=(x_test_rnn, y_test_cat))
cnn_model.fit(x_train_cnn, y_train_cat, epochs=3, batch_size=64, validation_data=(x_test_cnn, y_test_cat))

print("RNN Accuracy:", rnn_model.evaluate(x_test_rnn, y_test_cat)[1])
print("CNN Accuracy:", cnn_model.evaluate(x_test_cnn, y_test_cat)[1])
